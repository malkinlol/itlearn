@model ThemeVM
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@inject IChapterService _chapterService

@{
    var chapters = await _chapterService.GetAll();

}

<div class="content-wrapper">
    <section class="content">
        <div class="container-fluid">
            <h1>Создание</h1>
            <hr />
            @using (Html.BeginForm("CreateTheme", "Admin", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <input type="hidden" id="descriptionOld" value="@Model.Description" />
                <input type="hidden" id="descriptionNew" name="Description" />
                @*<input type="hidden" name="LanguageId" value="@Model.LanguageId" />*@
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label"><b>Название</b></label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" name="Name" value="@Model.Name">
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label"><b>Мини описание</b></label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" name="MiniDescription" value="@Model.MiniDescription">
                        @Html.ValidationMessageFor(model => model.MiniDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label"><b>Время для чтения</b></label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" name="CountReadTime" value="@Model.CountReadTime">
                        @Html.ValidationMessageFor(model => model.CountReadTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label"><b>Глава</b></label>
                    <div class="col-sm-10">
                        <select name="ChapterId" class="form-control">
                            @foreach (ChapterVM chapter in chapters)
                            {
                                if (Model.ChapterId == chapter.ChapterId)
                                {
                                    <option value="@chapter.ChapterId" selected>@chapter.Name</option>
                                    continue;
                                }
                                <option value="@chapter.ChapterId">@chapter.Name</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.ChapterId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-form-label"><b>Описание</b></label>
                    <p>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </p>
                    <div id="editor" class="editor">

                    </div>
                </div>
                <input type="submit" class="btn btn-outline-success" value="Создать" onclick="GetDescription()" />
            }
        </div>
    </section>
</div>

<script>
    let editor;

     ClassicEditor
        .create(document.querySelector('#editor'), {
            toolbar: ['heading', '|', 'undo', 'redo', 'bold', 'italic', 'bulletedList', 'numberedList', 'mediaEmbed']

        })
        //.create(document.querySelector('#editor'))
        .then(dataEditor => {
            editor = dataEditor;
        })
        .catch(error => {
            console.error(error);
        });

    function GetDescription() {
        const dataEditor = editor.getData();

        let substing = '';
        let substing1 = '';
        let substing2 = '';
        console.log(dataEditor);
        if (dataEditor.includes('iframe')) {
            substing = dataEditor.replace(new RegExp('<iframe src', 'g'), '<oembed url')
            substing1 = substing.replace(new RegExp("embed/", 'g'), 'watch?v=')
            substing2 = substing1.replace(new RegExp(' width="960" height="540" frameBorder="0" allow="autoplay; encrypted-media" allowFullScreen title="video"></iframe', 'g'), '></oembed');
        } else {
            substing2 = dataEditor;
        }

        document.getElementById('descriptionNew').setAttribute('value', substing2);
    }
</script>
