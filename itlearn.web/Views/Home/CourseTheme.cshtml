@model CourseTheme
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    a.disabled {
        pointer-events: none;
        cursor: default;
        color: #808080;
    }

    li.disabled {
        color: #808080;
    }
</style>

@inject ApplicationContext _context
@inject UserManager<User> _userManager

@{
    var user = await _userManager.FindByNameAsync(User.Identity.Name);

    var course = await _context.Courses.Include(x => x.CourseThemes).FirstOrDefaultAsync(x => x.CourseId == Model.CourseId);

    var themes = await _context.CourseThemes.Where(x => x.CourseId == Model.CourseId).ToListAsync();

    var resultCourse = new List<ResultCourse>();

    resultCourse = _context.ResultCourses
        .Where(x => x.UserId == user.Id)
        .ToList();

    var qa = _context.CourseThemeQAs
        .Where(x => x.CourseThemeId == Model.CourseThemeId)
        .ToList();

    Random rng = new Random();

    void Shuffle(List<CourseThemeQA> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            CourseThemeQA value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    Shuffle(qa);

    var qaModel = qa.FirstOrDefault();

    if (qaModel == null)
        qaModel = new CourseThemeQA();
}

<input type="hidden" id="description" value="@Model.Description" />

<div style="height: 100vh; width: 100%;position:relative; background-image: url('/images/backgrounds/languageBg.jpg'); background-repeat: no-repeat; background-size: cover;">
    <div class="container">
        <div class="row">
            <div class="col-md-8 text-white">
                <div class="mt-5 mb-5">
                    <nav aria-label="breadcrumb" style="background: none">
                        <ol class="breadcrumb" style="background: none; font-size: 24px;">
                            <li class="breadcrumb-item"><a href="/Home/SearchCourse" class="text-white">Курсы</a></li>
                            <li class="breadcrumb-item"><a href="/Account/ShowCourse?courseId=@course.CourseId" class="text-white">@course.Title</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Основы</li>
                        </ol>
                    </nav>
                </div>
                <div class="mt-5 mb-5">
                    <h1 class="display-3" style="font-weight: 600">@Model.Title</h1>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <p class="text-secondary" style="font-size:20px"><b>Время чтения</b></p>
                        <p><b>@Model.TimeRead минут</b></p>
                    </div>
                    <div class="col-md-4">
                        <p class="text-secondary" style="font-size:20px"><b>Опубликована</b></p>
                        <p><b>@course.CreatedDate.ToShortDateString()</b></p>
                    </div>
                    <div class="col-md-4">
                        <p class="text-secondary" style="font-size:20px"><b>Изменена</b></p>
                        <p><b>@course.UpdatedDate.ToShortDateString()</b></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">

            </div>
        </div>
    </div>
</div>
<div class="container-fluid mb-5">
    <div class="row">
        <div class="col-md-9" style="background-color: #ffffff; bottom: 80px; z-index: 100;">
            <div class="card shadow m-5">
                <div class="card-body">
                    <div class="mt-2 mb-4">
                        @if (User.Identity.IsAuthenticated)
                        {
                            if (!User.Identity.Name.Equals("admin@gmail.com"))
                            {
                                ResultCourse m = resultCourse.Where(x => x.ThemeId == Model.CourseThemeId).FirstOrDefault();
                                if (m == null)
                                {
                                    <button type="button" data-toggle="modal" data-target="#storyAccountModal" class="btn-custom btn-primary text-white">Понятно</button>

                                    @*@if (!m.IsFinish)
                                        {
                                            <button type="button" data-toggle="modal" data-target="#storyAccountModal" class="btn-custom btn-primary text-white">Понятно</button>
                                        }*@
                                }
                            }
                        }
                    </div>

                    <div id="content" class="">

                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mt-3">
                @using (Html.BeginForm("Search", "Home", FormMethod.Get))
                {
                    <div class="form-row">
                        <div class="col-12 col-md-10 mb-2">
                            <input type="text" class="form-control form-control-lg" name="SearchText" placeholder="Искать...">
                        </div>
                        <div class="col-12 col-md-2">
                            <button type="submit" class="btn btn-block btn-lg btn-primary"><span class="iconify" data-icon="simple-line-icons:magnifier" data-inline="false"></span></button>
                        </div>
                    </div>
                }
            </div>
            <div class="mt-5">
                <div class="accordion">
                    <div id="accordionExample" style="font-size: 20px;">
                        <div class="card shadow" style="border: none;">
                            <div class="card-header" id="theme-@Model.CourseId">
                                <h2 class="mb-0 text-center">
                                    <button class="btn" style="color:#7233ce" type="button" data-toggle="collapse" data-target="#collapse-@Model.CourseId">
                                        Курс: @_context.Courses.FirstOrDefault(x => x.CourseId == Model.CourseId).Title
                                    </button>
                                </h2>
                            </div>

                            <div id="collapse-@Model.CourseId" class="collapse show" aria-labelledby="theme-@Model.CourseId" data-parent="#accordionExample">
                                <div class="card-body">
                                    <ol>
                                        @for (int i = 0; i < themes.Count; i++)
                                        {
                                            if (i == 0)
                                            {
                                                if (Model.Title == themes[i].Title)
                                                {
                                                    <li><a class="" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId"><b>@themes[i].Title</b></a></li>
                                                    continue;
                                                }
                                                else
                                                {
                                                    <li><a class="" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId">@themes[i].Title</a></li>
                                                    continue;
                                                }

                                            }

                                            if (resultCourse.Count != 0)
                                            {
                                                ResultCourse m = resultCourse.Where(x => x.ThemeId == themes[i - 1].CourseThemeId).FirstOrDefault();

                                                if (m != null && m.IsFinish)
                                                {
                                                    if (Model.Title == themes[i].Title)
                                                    {
                                                        <li><a class="" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId"><b>@themes[i].Title</b></a></li>
                                                    }
                                                    else
                                                    {
                                                        <li><a class="" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId">@themes[i].Title</a></li>
                                                    }
                                                }
                                                else
                                                {
                                                    <li class="disabled"><a class="disabled" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId">@themes[i].Title</a></li>
                                                }
                                            }
                                            else
                                            {
                                                <li class="disabled"><a class="disabled" href="/Home/CourseTheme?themeId=@themes[i].CourseThemeId">@themes[i].Title</a></li>
                                            }
                                        }
                                    </ol>
                                </div>
                            </div>
                        </div>
                    </div>


                    @*@foreach (CourseTheme c in themes)
                        {
                            @await Html.PartialAsync("~/Views/Home/Partial/_ThemePartial.cshtml", c)
                        }*@
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="storyAccountModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@Model.Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (string.IsNullOrEmpty(qaModel.Question))
                {
                    <div class="alert alert-warning">
                        Извините, данный сервис еще в работе.
                        <br />
                        Приносим свои извенения.
                    </div>
                }
                else
                {

                    <p>Вы уверены, что вам ясна тема?</p>
                    @using (Html.BeginForm("ResultCourseCreate", "Account", FormMethod.Post))
                    {
                        <input type="hidden" name="ThemeId" value="@Model.CourseThemeId" />
                        <input type="hidden" name="CourseId" value="@Model.CourseId" />
                        <input type="hidden" name="UserId" value="@user.Id" />
                        <input type="hidden" name="QAId" value="@qaModel.QAId" />
                        <input type="hidden" name="Question" value="@qaModel.Question" />
                        <h4>@qaModel.Question</h4>
                        <input type="text" class="form-control mb-2" name="answer" />

                        <input type="submit" class="btn btn-success" value="Ясно" />
                    }
                }

            </div>
        </div>
    </div>
</div>

<script>
    let editor;

    ClassicEditor
        .create(document.querySelector('#editor'))
        .then(newEditor => {
            editor = newEditor;
        })
        .catch(error => {
            console.error(error);
        });

    function GetDescription() {
        const editorData = editor.getData();

        document.getElementById('description').setAttribute('value', editorData);
    }
</script>

<script>
    window.onload = function () {
        let data = document.getElementById('description').value;
        let fixeddata = '';
        let fixeddata1 = '';
        let fixeddata2 = '';
        console.log(data);
        if (data.includes('oembed')) {
            fixeddata = data.replace(new RegExp('<oembed url', 'g'), '<iframe src')
            fixeddata1 = fixeddata.replace(new RegExp("watch\\?v=", 'g'), 'embed/')
            fixeddata2 = fixeddata1.replace(new RegExp('></oembed', 'g'), ' width="960" height="540" frameBorder="0" allow="autoplay; encrypted-media" allowFullScreen title="video"></iframe');
        } else {
            fixeddata2 = data;
        }

        document.getElementById('content').innerHTML = fixeddata2;
    };
</script>