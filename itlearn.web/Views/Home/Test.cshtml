@model TestQuestionVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/style.css" />


@inject ApplicationContext _context
@inject IQuestionService _questionService
@inject ITestService _testService
@inject IAnswerService _answerService
@inject IThemeService _themeService
@inject UserManager<User> _userManager
@{
    Random rng = new Random();

    void Shuffle(IList<QuestionVM> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            QuestionVM value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    var questions = await _questionService.GetAll();

    if (Model.QuestionId == 0)
    {
        Shuffle(questions);
        TestQuestionVM.RandomQuestion = new List<QuestionVM>();
        TestQuestionVM.RandomQuestion = questions;
    }

    QuestionVM question = new QuestionVM();

    if (Model.QuestionNumber == 1)
    {
        question = TestQuestionVM.RandomQuestion.FirstOrDefault(x => x.TestId == Model.TestId);
        TestQuestionVM.RandomQuestion.Remove(question);
    }
    else
    {
        question = TestQuestionVM.RandomQuestion.FirstOrDefault(x => x.TestId == Model.TestId);
        TestQuestionVM.RandomQuestion.Remove(question);
    }

    List<AnswerVM> answers = new List<AnswerVM>();
    int countRightAnswers = 0;

    var questionRight = new List<QuestionVM>();
    var questionNotRight = new List<QuestionVM>();
    var persent = 0;
    var status = string.Empty;

    var test = await _testService.GetById(Model.TestId);
    var theme = await _themeService.GetById(test.ThemeId);

    if (question != null)
    {
        answers = _answerService
            .GetAll()
            .GetAwaiter().GetResult()
            .Where(x => x.QuestionId == question.QuestionId).ToList();

        countRightAnswers = answers.Count(x => x.IsRight);
    }
    else
    {
        questionRight = TestQuestionVM.QuestionRightList;
        questionNotRight = TestQuestionVM.QuestionNotRightList;

        persent = Model.CountSelectRightAnswer * 100 / Model.CountRightAnswer;





        Management management = null;
        if (persent <= 30)
        {
            status = "Плохой результат. Вам следует перечитать тему несколько раз и тестировать код предложенный в теме, чтобы усвоить весь материал.";
        }
        else if (persent > 30 && persent <= 60)
        {
            status = "Результат ниже среднего. Вам следует перечитать тему два раза и вы улучшите свой результат.";
        }
        else if (persent > 60 && persent <= 90)
        {
            if (User.Identity.IsAuthenticated)
            {
                if (!User.Identity.Name.Equals("admin@gmail.com"))
                {
                    var user = await _userManager.FindByNameAsync(User.Identity.Name);

                    var managements = _context.Managements
                        .Where(x => x.UserId == user.Id)
                        .ToList();

                    var isExists = managements.Any(x => x.ThemeId == theme.ThemeId);

                    if (!isExists)
                    {

                        management = new Management()
                        {
                            ThemeId = theme.ThemeId,
                            IsEnable = true,
                            UserId = user.Id
                        };

                        _context.Managements.Add(management);

                        await _context.SaveChangesAsync();
                    }
                }
            }

            status = "Хороший результат, выше среднего. Перечитайте тему 1 раз и вы достигните наилучшего результата!";
        }
        else
        {
            if (User.Identity.IsAuthenticated)
            {
                if (!User.Identity.Name.Equals("admin@gmail.com"))
                {
                    var user = await _userManager.FindByNameAsync(User.Identity.Name);

                    var managements = _context.Managements
                        .Where(x => x.UserId == user.Id)
                        .ToList();

                    var isExists = managements.Any(x => x.ThemeId == theme.ThemeId);

                    if (!isExists)
                    {

                        management = new Management()
                        {
                            ThemeId = theme.ThemeId,
                            IsEnable = true,
                            UserId = user.Id
                        };

                        _context.Managements.Add(management);

                        await _context.SaveChangesAsync();
                    }

                    //theme.IsEnableTheme = true;
                    //await _context.SaveChangesAsync();
                }
            }

            status = "Отличный результат, вы можете смело переходить к следующей теме для изучения!";
        }
    }
}

<div class="row mt-5 mb-5">
    <div class="col-md-3">


    </div>
    <div class="text-center col-md-6">

        @if (question != null)
        {
            <h3>@question.SomeQuestion</h3>

            @if (!string.IsNullOrEmpty(question.Avatar))
            {
                @if (!string.IsNullOrEmpty(question.Avatar))
                {
                    <div class="mt-5">
                        <img class="img-fluid" src="@Url.Content(question.Avatar)" style="height: 300px; width: 700px" />
                    </div>
                    <hr />
                }
            }

            using (Html.BeginForm("Test", "Home", FormMethod.Get))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-success list-unstyled" })

                <input type="hidden" name="TestId" value="@Model.TestId" />
                <input type="hidden" name="QuestionId" value="@question.QuestionId" />
                <input type="hidden" name="QuestionNumber" value="@(Model.QuestionNumber + 1)" />
                <input type="hidden" name="CountRightAnswer" value="@Model.CountRightAnswer" />
                <input type="hidden" name="CountSelectRightAnswer" value="@Model.CountSelectRightAnswer" />

                <div class="mt-3">
                    @if (countRightAnswers > 1)
                    {
                        foreach (AnswerVM answer in answers)
                        {
                            <label>
                                <input type="checkbox" class="option-input checkbox" value="@answer.SomeAnswer" name="AnswerChecked" />
                                @answer.SomeAnswer
                            </label>
                        }
                    }
                    else if (countRightAnswers == 1 && answers.Count == 1)
                    {
                        <input type="text" class="form-control m-3 mb-3 w-100" autocomplete="off" placeholder="Ваш ответ" name="AnswerChecked" />
                    }
                    else
                    {
                        foreach (AnswerVM answer in answers)
                        {
                            <label>
                                <input type="radio" class="option-input radio" value="@answer.SomeAnswer" name="AnswerChecked" />
                                @answer.SomeAnswer
                            </label>
                        }
                    }

                    <div class="btn-group" role="group" aria-label="Basic example">
                        <button type="submit" class="btn-custom btn-primary">Следующий</button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center">
                <h3>@theme.Name</h3>
                <h5 class="mt-4"><b>Совет: </b>@status</h5>
                <span style="font-size: 24px" class="mt-4"><b>Результат: @persent%</b></span>

                @if (User.Identity.IsAuthenticated)
                {
                    if (!User.Identity.Name.Equals("admin@gmail.com"))
                    {
                        <div class="row text-center mt-4">
                            <div class="col-md-6">
                                @using (Html.BeginForm("SaveAchievement", "Account", FormMethod.Post))
                                {
                                    <input type="hidden" name="TestId" value="@Model.TestId" />
                                    <input type="hidden" name="Persent" value="@persent" />
                                    <button type="submit" class="ml-5 mr-5 btn btn-lg btn-primary">Сохранить результат теста</button>
                                }
                            </div>
                            <div class="col-md-6">
                                @using (Html.BeginForm("SaveAdvice", "Account", FormMethod.Post))
                                {
                                    <input type="hidden" name="TestId" value="@Model.TestId" />
                                    <input type="hidden" name="Status" value="@status" />
                                    <button type="submit" class="ml-5 mr-5 btn btn-lg btn-primary">Сохранить совет</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="mt-4">
                <h4 style="margin-bottom: 5px;"><span style="border-bottom: 3px solid #6a4dcb">Неправильные вопросы</span></h4>
                <div class="mt-2">
                    @foreach (QuestionVM q in questionNotRight)
                    {
                        <label>
                            <input type="radio" class="option-input radio" checked disabled />
                            @q.SomeQuestion
                        </label>
                    }
                </div>
            </div>
            <div class="mt-5">
                <h4 style="margin-bottom: 5px;"><span style="border-bottom: 3px solid #6a4dcb">Правильные вопросы</span></h4>
                <div class="mt-2">
                    @foreach (QuestionVM q in questionRight)
                    {
                        <label>
                            <input type="radio" class="option-input radio" checked disabled />
                            @q.SomeQuestion
                        </label>
                    }
                </div>
            </div>
        }
    </div>
    <div class="col-md-3">

    </div>
</div>