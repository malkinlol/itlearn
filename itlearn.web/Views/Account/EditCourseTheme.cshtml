@model CourseThemeVM
@{
    ViewData["Title"] = "Course";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@inject UserManager<User> _userManager

@{
    var user = await _userManager.FindByEmailAsync(User.Identity.Name);
    var level = 1;

    if (user.Experience < 100)
        level = 1;
    else if (user.Experience >= 100 && user.Experience < 200)
        level = 2;
    else if (user.Experience >= 200 && user.Experience < 300)
        level = 3;
    else if (user.Experience >= 300 && user.Experience < 400)
        level = 4;
    else if (user.Experience >= 400 && user.Experience < 500)
        level = 5;
}

<style>
    .course-link:hover {
        border-left: 3px solid #ffffff;
    }

    div.img-container {
        position: relative
    }

        div.img-container img {
            margin: 0;
            position: absolute;
            top: 50%;
            border-radius: 50%;
            left: 50%;
            margin-right: -50%;
            transform: translate(-50%, -50%)
        }

    .dot {
        height: 50px;
        width: 50px;
        background-color: rgba(0, 0, 0, 1);
        border-radius: 50%;
        border: 6px solid rgb(255, 255, 255);
        opacity: 0.7;
        display: inline-block;
        position: relative;
        top: 160px;
        left: 145px;
    }

        .dot span {
            margin: 0;
            position: absolute;
            font-size: 18px;
            top: 50%;
            left: 50%;
            margin-right: -50%;
            transform: translate(-50%, -50%)
        }

    .lable {
        font-size: 14px;
        background: #ad87de;
        font-weight: 600;
        text-transform: uppercase;
        padding: 2px 10px;
        border-radius: 20px;
    }

    .lable-success {
        font-size: 14px;
        background: #28ff5a;
        font-weight: 600;
        text-transform: uppercase;
        padding: 2px 10px;
        border-radius: 20px;
    }

    .lable-warning {
        font-size: 14px;
        background: #ff6a00;
        font-weight: 600;
        text-transform: uppercase;
        padding: 2px 10px;
        border-radius: 20px;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3" style="height: 100vh; background-color: #000000; padding-left: 0px; padding-right: 0px;">
            <div class="list-group " style="background: none;">
                <div class="img-container list-group-item" style="        background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, 1)), url(/images/default/editprofile.jpg);
        background-repeat: no-repeat;
        background-size: cover;
        height: 300px;
        width: 100%;
        position: relative;
        margin-top: -1px;
        border: none;
    ">
                    @if (!string.IsNullOrEmpty(user.Avatar))
                    {
                        <img src="@Url.Content(user.Avatar)" style="width: 130px; height: 130px;" />
                    }
                    else
                    {
                        <img src="~/images/default/default-person.svg" style="width: 130px; height: 130px;" />
                    }
                    <div>
                        <span class="dot text-center">
                            <span style="color: rgb(255, 255, 255)">@level</span>
                        </span>
                    </div>
                </div>
                <a href="/Account/Course" class=" course-link list-group-item text-white list-group-item-action text-uppercase " style="background: none;">Курсы на изучении</a>
                <a href="/Account/MyCourse" class="course-link  list-group-item text-white list-group-item-action text-uppercase active" style="background: none; border: 1px solid #ffffff ">Мои курсы</a>
                <a href="/Account/CompleteCourse" class="course-link  list-group-item text-white list-group-item-action text-uppercase " style="background: none; ">Законченные курсы</a>
            </div>
        </div>
        <div class="col-md-9">
            <div class="container-fluid">
                <div class="row mt-3">
                    <div class="col-md-6">
                        <p class="display-1" style="font-size: 35px">Редактирование курса</p>
                        <br />
                        <a href="/Account/DetailCourse?courseId=@Model.CourseId" class="btn btn-outline-primary">Назад</a>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-9">
                        @using (Html.BeginForm("EditCourseTheme", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <input type="hidden" value="@Model.CourseThemeId" name="CourseThemeId" />
                            <input type="hidden" id="descriptionOld" value="@Model.Description" />
                            <input type="hidden" id="descriptionNew" name="Description" />

                            <div class="form-group row" style="margin-left: 15px; margin-right: 15px;">
                                <label for="title" class="col-sm-3 col-form-label">Заголовок</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" id="title" value="@Model.Title" name="Title">
                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row" style="margin-left: 15px; margin-right: 15px;">
                                <label for="timeRead" class="col-sm-3 col-form-label">Время чтения</label>
                                <div class="col-sm-9">
                                    <input type="number" class="form-control" min="1" max="100" value="@Model.TimeRead" id="timeRead" name="TimeRead">
                                    @Html.ValidationMessageFor(model => model.TimeRead, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row" style="margin-left: 15px; margin-right: 15px;">
                                <label for="editor" class="col-sm-3 col-form-label">Длинное описание</label>
                                <div class="col-sm-9">
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    <div id="editor" class="editor">

                                    </div>
                                </div>
                            </div>
                            <div class="form-group row float-right" style="margin-left: 15px; margin-right: 15px;">
                                <div class="text-right">
                                    <input type="submit" class="button_c" value="Сохранить" onclick="GetDescription()" />
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
   let editor;

  ClassicEditor
        .create(document.querySelector('#editor'), {
            toolbar: ['mediaEmbed']

        })
        //.create(document.querySelector('#editor'))
        .then(dataEditor => {
            dataEditor.setData(document.getElementById('descriptionOld').value);
            editor = dataEditor;
        })
        .catch(error => {
            console.error(error);
        });

    function GetDescription() {
        const dataEditor = editor.getData();

        let substing = '';
        let substing1 = '';
        let substing2 = '';
        console.log(dataEditor);
        if (dataEditor.includes('iframe')) {
            substing = dataEditor.replace(new RegExp('<iframe src', 'g'), '<oembed url')
            substing1 = substing.replace(new RegExp("embed/", 'g'), 'watch?v=')
            substing2 = substing1.replace(new RegExp(' width="960" height="540" frameBorder="0" allow="autoplay; encrypted-media" allowFullScreen title="video"></iframe', 'g'), '></oembed');
        } else {
            substing2 = dataEditor;
        }

        document.getElementById('descriptionNew').setAttribute('value', substing2);
    }
</script>